spring.application.name=UserService

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/userservice
spring.datasource.username=userserviceuser
#spring.datasource.password=secret
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true

# disable the logs for testing purpose for ServiceDiscovery as you hit the api
# for "http://localhost:8181/product/1/cdcwdc" you will see poductservice request
# will go to different servers of userservice everytime
logging.level.org.springframework.security=TRACE

spring.security.user.name=user
spring.security.user.password=password

#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods[0]=client_secret_basic
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[0]=authorization_code
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[1]=refresh_token
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris[0]=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris[0]=http://127.0.0.1:8080/
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[0]=openid
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[1]=profile
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true


#Bcryptgenerator
#jwt.io
#https://docs.spring.io/spring-authorization-server/reference/getting-started.html
#https://docs.spring.io/spring-authorization-server/reference/guides/how-to-jpa.html
#https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html

# Spring cloud Netflix
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# if this service is running on aws, this url should be the url of eureka server on aws.
server.port=${US_SERVER_PORT}